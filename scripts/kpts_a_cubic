#!/bin/bash

################################### Parameter Setting ################################

echo "KPOINTS convergence test submission initiated"

# Initialize a variable to hold all job IDs.
job_ids=()

# Define the range of KPOINTS values to test (odd numbers typically used).
K_START=3
K_END=15
K_INCREMENT=2

# Number of processors to use with mpirun
NP=36

################################### Create directories and run VASP ################################

# Loop over the specified range of KPOINTS values.
for (( K=$K_START; K<=$K_END; K+=$K_INCREMENT ))
do
    # Create a directory for the current KPOINTS value.
    mkdir KPOINTS_${K}x${K}x${K}
    cd KPOINTS_${K}x${K}x${K}

    # Copy VASP input files from the parent directory.
    cp ../INCAR .
    cp ../POSCAR .
    cp ../POTCAR .

    # Create the KPOINTS file with the current K-mesh for cubic structure.
    echo "Automatic mesh" > KPOINTS
    echo "0" >> KPOINTS
    echo "Gamma" >> KPOINTS
    echo "$K $K $K" >> KPOINTS
    echo "0 0 0" >> KPOINTS

    # Run VASP using mpirun.
    echo "Running VASP in directory: $PWD with KPOINTS $K x $K x $K"
    mpirun -np $NP vasp_std

    # Return to the parent directory.
    cd ..

    # Optionally, store the job ID if using a job scheduler.
    # job_id=$(sbatch job_script.sh | awk '{print $4}')
    # job_ids+=($job_id)
done

echo "KPOINTS convergence test submission completed"

# Optionally, you can print all job IDs or perform further operations.
# echo "Submitted jobs: ${job_ids[@]}"
